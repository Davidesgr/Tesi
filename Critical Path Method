calculateCPM(activitiesCPM:ActivityEntity[]): any {
    const activityDict = _.keyBy(activitiesCPM, 'name');
    const graph = new Graph({ directed: true });

    activitiesCPM.forEach(activity => {
      graph.setNode(activity.name, activity);
    });

    activitiesCPM.forEach(activity => {
      activity.predecessors.forEach(predecessor => {
        graph.setEdge(predecessor, activity.name);
      });
    });

    // Calculate ES and EF
    const topologicallySorted = alg.topsort(graph);
    topologicallySorted.forEach(node => {
      const activity = activityDict[node];
      if (activity.predecessors.length === 0) {
        activity.es = 0;
        activity.ef = activity.duration;
      } else {
        const maxEF = Math.max(
          ...activity.predecessors.map(predecessor => activityDict[predecessor].ef)
        );
        activity.es = maxEF;
        activity.ef = maxEF + activity.duration;
      }
    });

    // Calculate LS and LF
    const maxEF = Math.max(...activitiesCPM.map(activity => activity.ef));
    topologicallySorted.reverse().forEach(node => {
      const activity = activityDict[node];
      const successors = graph.successors(node);
      if (!successors || successors.length === 0) {
        activity.lf = maxEF;
        activity.ls = maxEF - activity.duration;
      } else {
        const minLS = Math.min(
          ...successors.map(successor => activityDict[successor].ls)
        );
        activity.lf = minLS;
        activity.ls = minLS - activity.duration;
      }
    });

    // Calculate Total Float
    activitiesCPM.forEach(activity => {
      activity.float = activity.ls - activity.es;
    });

    // Identify Critical Path
    const criticalPath = this.identifyCriticalPath(activitiesCPM);

    return criticalPath;
  }

  identifyCriticalPath(activities: ActivityEntity[]): any {
    const criticalPath = [];
    const startActivities = activities.filter(activity => activity.float === 0 && activity.predecessors.length === 0);

    const addActivity = (activity: ActivityEntity) => {
      criticalPath.push(activity.name);
      const successors = activities.filter(succ => succ.predecessors.includes(activity.name));
      const nextCritical = successors.find(succ => succ.float === 0);
      if (nextCritical) {
        addActivity(nextCritical);
      }
    };

    startActivities.forEach(startActivity => addActivity(startActivity));

    return this.formatCriticalPath(activities);
  }

 formatCriticalPath(activities: ActivityEntity[]): any {
    const formattedPath = [];
    const commonPredecessors = _.groupBy(activities, activity => activity.predecessors.join(','));

    Object.keys(commonPredecessors).forEach(key => {
        const group = commonPredecessors[key];
        const levelActivities = group.map(activity => {
            return {
                name: activity.name,
                float: activity.float,
                duration: activity.duration,
                energyConsumption:activity.energyConsumption
            };
        });
        formattedPath.push(levelActivities);
    });

    return { criticalPath: formattedPath };
}
